# The install definition contains the commands needed to create a Ubuntu
# 22.04.3 LTS virtual machine capable of running your tests.
#
# This is where you install required programming languages, databases and other
# supporting libraries.
#
# Your repository source code is available in the /src directory.
#
# The build installation is cached as a virtual machine image for subsequent
# check runs. When the install section changes, the virtual machine image is
# re-created.
#
# Installation commands are specified as a TOML multi-line string.
#
# N.B. Shell commands MUST execute non-interactively. For example, commands
# requiring user input will hang until the check run is cancelled or after a
# 15 minute timeout.
[setup]
packages = '''
# Add the yarn repo + yarn repo keys
curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add  -
sudo apt-add-repository -y 'deb https://dl.yarnpkg.com/debian/ stable main'

# Add repo for NodeJS
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --batch --yes --dearmor -o /etc/apt/keyrings/nodesource.gpg
NODE_MAJOR=20
echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list
sudo apt-get update -y

# Add packages to build and run Mastodon
sudo sudo NEEDRESTART_MODE=a apt-get install \
  git-core \
  g++ \
  libpq-dev \
  libxml2-dev \
  libxslt1-dev \
  imagemagick \
  nodejs \
  redis-server \
  redis-tools \
  postgresql \
  postgresql-contrib \
  libicu-dev \
  libidn11-dev \
  libreadline6-dev \
  autoconf \
  bison \
  build-essential \
  ffmpeg \
  file \
  gcc \
  libffi-dev \
  libgdbm-dev \
  libjemalloc-dev \
  libncurses5-dev \
  libprotobuf-dev \
  libssl-dev \
  libyaml-dev \
  pkg-config \
  protobuf-compiler \
  zlib1g-dev \
  -y

# Install Node
sudo corepack enable
corepack prepare
yarn install

# Install Ruby
\curl -sSL https://get.rvm.io | bash -s -- --ignore-dotfiles
echo "source $HOME/.rvm/scripts/rvm" >> ~/.bash_profile
source ~/.bash_profile
rvm install ruby-3.2.3
gem update --system --no-doc
gem install bundler --no-document

# Rails
bundle install
RAILS_ENV=test rails db:setup
RAILS_ENV=test bundle exec rails assets:precompile
'''

# (!) If you're using importmaps, you can delete node_modules / .nvm / yarn
cache = [ "vendor/bundle", "node_modules", "/home/ubuntu/.cache/yarn" ]

# The setup definition specifies commands to execute before running your test
# suites.
#
# Use the setup definition to update your project dependencies or compile classes.
# For example, in a ruby project here's where you run bundle install.
#
# Unlike the install definition, setup is not cached and therefore executes on
# every build.
test_suite = '''
yarn install
bundle install
RAILS_ENV=test bundle exec rails assets:precompile
RAILS_ENV=test bundle exec rails db:migrate
'''

# Test suites are inferred from each TOML key ending with test_suite.
#
# Specify multiple test suites by adding test_suite keys. For example:
# [test_suite."system tests"]
# [test_suite.integration]
#
# Create a default test_suite if your build only requires one test suite.
[test_suite.default]

# A string specifying the command which executes one test file.
#
# The test file is passed as the last argument to the command.
command = "bundle exec rspec"

# An array of file path globs which expands to a list of files. File paths are
# relative to the project directory.
#
# Each file is passed as the last argument to your test command.
# Default test suite
files = ["spec/models/user_spec.rb"]

# An array of file path globs which expands to a list of files. File paths are
# relative to the project directory.
#
# No tests will be executed with any files matched in this definition section.
ignore = [
  "spec/models/IGNORE_spec.rb"
]